const fs = require('fs');
https://www.npmjs.com/package/file-system
fs.writeFileSync('notes.txt', 'My name is Anthony.')
fs.appendFileSync('notes.txt', ' I am a computer science major.')

function getNotes(){
    return "Get notes ...";
};
module.exports = getNotes
const getNotes = require('./notes.js');
const validator = require('validator')
console.log(validator.isURL('https://www.google.com/'))
notes = getNotes();
console.log(notes);
const chalk = require('chalk');
console.log(chalk.green("hello"));


//Command Line argv and yargs
https://www.npmjs.com/package/yargs
const yargs = require('yargs')
console.log(process.argv[2]);
yargs.command({
    command: 'add',
    describe: 'adding title and body',
    builder: {
        title: {
            describe: "Note Title",
            demandOption:true,
            type:"string"
        },
        body: {
            describe: "Note Body",
            demandOption: true,
            type: "string"
        }
    },
    handler: function(argv){
        console.log('Title: ' + argv.title)
        console.log('Body: ' + argv.body)
    }
})
yargs.parse()
>> node app.js add --title="Buy" --body="Note body here"



//JSON Files
{"name":"Gunther","planet":"Earth","age":54}
const fs = require('fs');

const dataBuffer = fs.readFileSync('1-json.json');
const dataJSON = dataBuffer.toString();
const data = JSON.parse(dataJSON);
data.name = "Anthony"
const JSONData = JSON.stringify(data)
fs.writeFileSync('1-json.json', JSONData)
{"name":"Anthony","planet":"Earth","age":54}


//Arrow and Function
const tasks = {
    tasks: [{
        text: 'Grocery shopping',
        completed: true
    },{
        text: 'Clean yard',
        completed: false
    }, {
        text: 'Film course',
        completed: false
    }],
    getTasksToDo(){
        this.tasks.forEach((task) => {
            if(task.completed === false){
                console.log(task.text)
            }
        })
    }
}
console.log(tasks.getTasksToDo())


//Requests
const mapbox = 'https://api.mapbox.com/geocoding/v5/mapbox.places/Los%20Angeles.json?access_token=pk.eyJ1IjoiYW50aG9ueWdvbmc5IiwiYSI6ImNrYmJmczN5ZjAwdjYycnF2Zmo0NDhocGUifQ.W1ryFzBbLuVbnD6MdinoCg&limit=1'

request({url:mapbox, json:true}, (error, response) =>{
    if(error){
        console.log("Could not connect to url");
    }else if(response.body.features.length == 0){
        console.log("Invalid parameters")
    } else {
        console.log('long = ' + response.body.features[0].center[0] + " lat= " + response.body.features[0].center[1])
    }
})

//
// Goal: Mess around with the callback pattern
//
// 1. Define an add function that accepts the correct arguments
// 2. Use setTimeout to simulate a 2 second delay
// 3. After 2 seconds are up, call the callback function with the sum
// 4. Test your work!

add(1, 4, (sum) => {
    console.log(sum) // Should print: 5
})

const add = (num1, num2, callback) => {
    setTimeout(() =>{
        callback(num1+num2)
    }, 2000)
}

//Callback Functions Cont.
const geocode = (address, callback) => {
    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + address + '.json?access_token=pk.eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw & limit=1'
    request({ url: url, json: true }, (error, response) => {
        if (error) {
            callback('Unable to connect to location services!', undefined)
        } else if (response.body.features.length === 0) {
            callback('Unable to find location. Try another search.',
                undefined)
        } else {
            callback(undefined, {
                latitude: response.body.features[0].center[0],
                longitude: response.body.features[0].center[1],
                location: response.body.features[0].place_name
            })
        }
    })
}

geocode('Boston', (error, data) => {
    console.log('Error', error)
    console.log('Data', data)
})
